Install latest vagrant
Start a vagrant vm by doing vagrant init and making changes to the Vagrantfile so the memory size is 2048, cpus is 2 and install docker by shell commands(todo) and swapoff -a(todo).
ssh into the virtual machine Master
	- sudo apt get update (this is to be moved to vagrant step)
	- If docker is not provisioned install docker(https://kubernetes.io/docs/setup/production-environment/container-runtimes/), for centos7 these are the following steps:
		# (Install Docker CE)
		## Set up the repository
		### Install required packages
		yum install -y yum-utils device-mapper-persistent-data lvm2

		## Add the Docker repository
		yum-config-manager --add-repo \
		  https://download.docker.com/linux/centos/docker-ce.repo


		# Install Docker CE, version 19.03 is the recommended one via official kubeadm docs but 1.13.1, 17.03, 17.06, 17.09, 18.06 and 18.09 are known to work as well
		yum update -y && yum install -y \
		  containerd.io-1.2.13 \
		  docker-ce-19.03.11 \
		  docker-ce-cli-19.03.11

		## Create /etc/docker
		mkdir /etc/docker

		# Set up the Docker daemon
		cat > /etc/docker/daemon.json <<EOF
		{
		  "exec-opts": ["native.cgroupdriver=systemd"],
		  "log-driver": "json-file",
		  "log-opts": {
		    "max-size": "100m"
		  },
		  "storage-driver": "overlay2",
		  "storage-opts": [
		    "overlay2.override_kernel_check=true"
		  ]
		}
		EOF

		mkdir -p /etc/systemd/system/docker.service.d

		# Restart Docker
		systemctl daemon-reload
		systemctl restart docker

		# If you want the docker service to start on boot, run the following command:
		sudo systemctl enable docker


	- You will install these packages on all of your machines: kubeadm, kubelet, kubectl
	- run the following commands (applies for CentOS, RHEL or Fedora)(https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/)
		cat <<EOF > /etc/yum.repos.d/kubernetes.repo
		[kubernetes]
		name=Kubernetes
		baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
		enabled=1
		gpgcheck=1
		repo_gpgcheck=1
		gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
		exclude=kubelet kubeadm kubectl
		EOF

		# Set SELinux in permissive mode (effectively disabling it)
		setenforce 0
		sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

		yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

		systemctl enable --now kubelet

	- When using Docker, kubeadm will automatically detect the cgroup driver for the kubelet and set it in the /var/lib/kubelet/config.yaml file during runtime, so if you are using any other CRI check online docs.
	- Restarting the kubelet is required:
		systemctl daemon-reload
		systemctl restart kubelet

########## Installation is done move to Install a single control-plane Kubernetes cluster ###########
	- kubeadm init (look at online docs for modifications to your cluster)

		Your Kubernetes control-plane has initialized successfully!

	- To start using your cluster, you need to run the following as a regular user:

		mkdir -p $HOME/.kube
		sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
		sudo chown $(id -u):$(id -g) $HOME/.kube/config

	- let us check the cluster status 

		Kubernetes master is running at https://10.0.2.15:6443
		KubeDNS is running at https://10.0.2.15:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

		To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.

	- You should now deploy a pod network to the cluster.
	
		Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
		https://kubernetes.io/docs/concepts/cluster-administration/addons/

		Then you can join any number of worker nodes by running the following on each as root:

		kubeadm join 10.0.2.15:6443 --token 7nqd9k.8bq7qi0cr2bdsl2w \
		    --discovery-token-ca-cert-hash sha256:ed0175dfabd807d9e378d86b8211b25f500ff800b387fe39f0afb7ee88b81ee9

	- i tried calico
		kubectl apply -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml

		[vagrant@localhost ~]$ kubectl get pods --all-namespaces
		NAMESPACE     NAME                                            READY   STATUS    RESTARTS   AGE
		kube-system   calico-kube-controllers-76d4774d89-fcmbt        1/1     Running   0          7m28s
		kube-system   calico-node-gktc7                               1/1     Running   0          7m28s
		kube-system   coredns-66bff467f8-s9g5n                        1/1     Running   0          15m
		kube-system   coredns-66bff467f8-wgts5                        1/1     Running   0          15m
		kube-system   etcd-localhost.localdomain                      1/1     Running   0          15m
		kube-system   kube-apiserver-localhost.localdomain            1/1     Running   0          15m
		kube-system   kube-controller-manager-localhost.localdomain   1/1     Running   0          15m
		kube-system   kube-proxy-nwfk6                                1/1     Running   0          15m
		kube-system   kube-scheduler-localhost.localdomain            1/1     Running   0          15m


	